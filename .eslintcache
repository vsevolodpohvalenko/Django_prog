[{"/home/seva/JollyTeam/src/index.js":"1","/home/seva/JollyTeam/src/App.js":"2","/home/seva/JollyTeam/src/serviceWorker.js":"3","/home/seva/JollyTeam/src/component/layout/Alerts.js":"4","/home/seva/JollyTeam/src/component/Preloader/preloader.js":"5","/home/seva/JollyTeam/src/component/layout/PageNotFound.js":"6","/home/seva/JollyTeam/src/component/Templates/account_template/account_template.js":"7","/home/seva/JollyTeam/src/redux/redux_store.ts":"8","/home/seva/JollyTeam/src/redux/reducers/AuthReducer.tsx":"9","/home/seva/JollyTeam/src/component/FAQ/FAQ.tsx":"10","/home/seva/JollyTeam/src/component/common/PrivateRoute.tsx":"11","/home/seva/JollyTeam/src/component/Contact/ContactContainer.tsx":"12","/home/seva/JollyTeam/src/component/home/HomeContainer.tsx":"13","/home/seva/JollyTeam/src/component/Companies/companiesContainer.tsx":"14","/home/seva/JollyTeam/src/component/requestForProposals/requestForProposals.tsx":"15","/home/seva/JollyTeam/src/component/User/Profile.tsx":"16","/home/seva/JollyTeam/src/component/requestForProposals/requestForProposalsContainer.tsx":"17","/home/seva/JollyTeam/src/component/accounts/activate/ActivateContainer.tsx":"18","/home/seva/JollyTeam/src/component/accounts/Login/login.tsx":"19","/home/seva/JollyTeam/src/component/accounts/resetPasswordConfirm/ResetPasswordConfirmContainer.tsx":"20","/home/seva/JollyTeam/src/component/accounts/resetPassword/ResetPasswordContainer.tsx":"21","/home/seva/JollyTeam/src/component/accounts/Profile/ProfileView/ProfileViewContainer.tsx":"22","/home/seva/JollyTeam/src/component/accounts/Profile/ProfileEdit/ProfileEditContainer.tsx":"23","/home/seva/JollyTeam/src/component/User/ProfileContainer.jsx":"24","/home/seva/JollyTeam/src/component/accounts/Register/register.jsx":"25","/home/seva/JollyTeam/src/component/Templates/main_template.js":"26","/home/seva/JollyTeam/src/redux/reducers/ContentReducer.tsx":"27","/home/seva/JollyTeam/src/redux/reducers/FAQReducer.tsx":"28","/home/seva/JollyTeam/src/api/AuthApi.ts":"29","/home/seva/JollyTeam/src/redux/reducers/ErrorsReducer.tsx":"30","/home/seva/JollyTeam/src/api/profileApi.ts":"31","/home/seva/JollyTeam/src/redux/reducers/ProfileReducer.tsx":"32","/home/seva/JollyTeam/src/redux/reducers/MessageReducer.tsx":"33","/home/seva/JollyTeam/src/api/FaqApi.ts":"34","/home/seva/JollyTeam/src/component/home/Home.tsx":"35","/home/seva/JollyTeam/src/component/Contact/Contact.tsx":"36","/home/seva/JollyTeam/src/redux/reducers/RequestForProposals-selectors.tsx":"37","/home/seva/JollyTeam/src/component/Companies/companies.tsx":"38","/home/seva/JollyTeam/src/component/accounts/activate/Activate.tsx":"39","/home/seva/JollyTeam/src/component/accounts/Profile/ProfileView/ProfileView.tsx":"40","/home/seva/JollyTeam/src/component/accounts/Profile/ProfileEdit/ProfileEdit.tsx":"41","/home/seva/JollyTeam/src/component/layout/Header/HeaderContainer.jsx":"42","/home/seva/JollyTeam/src/redux/reducers/Profile-selectors.tsx":"43","/home/seva/JollyTeam/src/component/layout/Header/Header.jsx":"44","/home/seva/JollyTeam/src/component/accounts/resetPassword/ResetPassword.jsx":"45","/home/seva/JollyTeam/src/component/layout/Footer/Footer.jsx":"46","/home/seva/JollyTeam/src/component/accounts/resetPasswordConfirm/ResetPasswordConfirm.jsx":"47","/home/seva/JollyTeam/src/api.ts":"48","/home/seva/JollyTeam/src/api/ContentApi.ts":"49","/home/seva/JollyTeam/src/component/accounts/CreateCompany/NewCompanyProfile.jsx":"50","/home/seva/JollyTeam/src/component/accounts/Profile/ProfileEdit/Document.tsx":"51"},{"size":502,"mtime":1609694538067,"results":"52","hashOfConfig":"53"},{"size":5042,"mtime":1612029244593,"results":"54","hashOfConfig":"53"},{"size":5088,"mtime":1607367893955,"results":"55","hashOfConfig":"53"},{"size":1526,"mtime":1607367893947,"results":"56","hashOfConfig":"53"},{"size":619,"mtime":1608739310644,"results":"57","hashOfConfig":"53"},{"size":927,"mtime":1612009187303,"results":"58","hashOfConfig":"53"},{"size":951,"mtime":1612009187299,"results":"59","hashOfConfig":"53"},{"size":1179,"mtime":1607367893955,"results":"60","hashOfConfig":"53"},{"size":7053,"mtime":1612021916435,"results":"61","hashOfConfig":"53"},{"size":4221,"mtime":1608797259780,"results":"62","hashOfConfig":"53"},{"size":1204,"mtime":1608062259243,"results":"63","hashOfConfig":"53"},{"size":628,"mtime":1607367893943,"results":"64","hashOfConfig":"53"},{"size":908,"mtime":1607367893947,"results":"65","hashOfConfig":"53"},{"size":1322,"mtime":1608062258459,"results":"66","hashOfConfig":"53"},{"size":8923,"mtime":1611986176256,"results":"67","hashOfConfig":"53"},{"size":4891,"mtime":1612030724099,"results":"68","hashOfConfig":"53"},{"size":1055,"mtime":1608808048584,"results":"69","hashOfConfig":"53"},{"size":1135,"mtime":1608233928091,"results":"70","hashOfConfig":"53"},{"size":3328,"mtime":1611985435524,"results":"71","hashOfConfig":"53"},{"size":469,"mtime":1607367893943,"results":"72","hashOfConfig":"53"},{"size":567,"mtime":1607367893943,"results":"73","hashOfConfig":"53"},{"size":1387,"mtime":1607367893943,"results":"74","hashOfConfig":"53"},{"size":2069,"mtime":1612028691374,"results":"75","hashOfConfig":"53"},{"size":1699,"mtime":1608449192383,"results":"76","hashOfConfig":"53"},{"size":4910,"mtime":1612026883502,"results":"77","hashOfConfig":"53"},{"size":270,"mtime":1612009187299,"results":"78","hashOfConfig":"53"},{"size":1234,"mtime":1607367893951,"results":"79","hashOfConfig":"53"},{"size":2322,"mtime":1607367893955,"results":"80","hashOfConfig":"53"},{"size":1326,"mtime":1608233486960,"results":"81","hashOfConfig":"53"},{"size":689,"mtime":1607367893955,"results":"82","hashOfConfig":"53"},{"size":3159,"mtime":1612073045682,"results":"83","hashOfConfig":"53"},{"size":7347,"mtime":1608296581287,"results":"84","hashOfConfig":"53"},{"size":681,"mtime":1607367893955,"results":"85","hashOfConfig":"53"},{"size":789,"mtime":1608794086541,"results":"86","hashOfConfig":"53"},{"size":2817,"mtime":1612009187303,"results":"87","hashOfConfig":"53"},{"size":5261,"mtime":1612009187299,"results":"88","hashOfConfig":"53"},{"size":348,"mtime":1608065921539,"results":"89","hashOfConfig":"53"},{"size":5932,"mtime":1608738664855,"results":"90","hashOfConfig":"53"},{"size":610,"mtime":1608789745640,"results":"91","hashOfConfig":"53"},{"size":4789,"mtime":1612075122801,"results":"92","hashOfConfig":"53"},{"size":15645,"mtime":1612030257629,"results":"93","hashOfConfig":"53"},{"size":523,"mtime":1607367893947,"results":"94","hashOfConfig":"53"},{"size":536,"mtime":1607367893955,"results":"95","hashOfConfig":"53"},{"size":1569,"mtime":1612009187303,"results":"96","hashOfConfig":"53"},{"size":1287,"mtime":1608062259311,"results":"97","hashOfConfig":"53"},{"size":1757,"mtime":1611985386591,"results":"98","hashOfConfig":"53"},{"size":1536,"mtime":1612009187299,"results":"99","hashOfConfig":"53"},{"size":171,"mtime":1607367893943,"results":"100","hashOfConfig":"53"},{"size":339,"mtime":1608231327684,"results":"101","hashOfConfig":"53"},{"size":7600,"mtime":1612073045990,"results":"102","hashOfConfig":"53"},{"size":3382,"mtime":1608062259751,"results":"103","hashOfConfig":"53"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},"8mrkkm",{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"106"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"122"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"122"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"122"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"106"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"122"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"122"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"122"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"122"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"122"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"122"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"197","messages":"198","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"122"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":2,"source":"218","usedDeprecatedRules":"106"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},"/home/seva/JollyTeam/src/index.js",[],["221","222"],"/home/seva/JollyTeam/src/App.js",["223"],"import React from 'react';\nimport './App.css';\nimport {Provider} from 'react-redux'\nimport {AccountTemplate} from './component/Templates/account_template/account_template'\nimport Login from './component/accounts/Login/login'\nimport store from './redux/redux_store'\nimport {BrowserRouter, Route, Switch} from 'react-router-dom'\nimport Register from './component/accounts/Register/register';\nimport PrivateRoute from './component/common/PrivateRoute';\nimport {loadUser} from './redux/reducers/AuthReducer';\nimport {positions, Provider as AlertProvider, transitions} from 'react-alert'\nimport AlertTemplate from 'react-alert-template-basic'\nimport Alerts from './component/layout/Alerts';\nimport ResetPasswordConfirmContainer from './component/accounts/resetPasswordConfirm/ResetPasswordConfirmContainer';\nimport ResetPasswordContainer from './component/accounts/resetPassword/ResetPasswordContainer';\nimport ActivateContainer from './component/accounts/activate/ActivateContainer';\nimport HomeContainer from './component/home/HomeContainer';\nimport ContactContainer from './component/Contact/ContactContainer';\nimport ProfileViewContainer from \"./component/accounts/Profile/ProfileView/ProfileViewContainer\";\nimport CompaniesContainer from \"./component/Companies/companiesContainer\";\nimport ApolloClient from 'apollo-boost';\nimport {ApolloProvider} from '@apollo/react-hooks';\nimport Preloader from \"./component/Preloader/preloader\";\nimport {PageNotFound} from \"./component/layout/PageNotFound\";\nimport {FrequentlyAskedQuestions} from \"./component/FAQ/FAQ\";\n\nimport ProfileEditContainer from \"./component/accounts/Profile/ProfileEdit/ProfileEditContainer\";\nimport RequestForQuotationContainer from \"./component/requestForProposals/requestForProposalsContainer\";\nimport ProfileContainer from \"./component/User/ProfileContainer\";\nimport AddCompany from \"./component/accounts/CreateCompany/NewCompanyProfile\";\nimport NewCompanyProfile from \"./component/accounts/CreateCompany/NewCompanyProfile\";\n\n\nconst client = new ApolloClient({\n    uri: 'https://jollyteam.herokuapp.com/graphql/', // your GraphQL Server\n});\n\n\nconst options = {\n    // you can also just use 'bottom center'\n    position: positions.TOP_RIGHT,\n    timeout: 3000,\n    // you can also just use 'scale'\n    transition: transitions.SCALE\n}\n\nclass App extends React.Component {\n    componentDidMount() {\n        debugger\n     store.getState().auth.auth_token && store.dispatch(loadUser())\n    }\n\n    render() {\n       return store.getState().auth.isLoading ? <Preloader/> :  <div className=\"App\">\n           <ApolloProvider client={client}>\n            <BrowserRouter>\n                <Provider store={store}>\n                    <AlertProvider template={AlertTemplate}{...options}>\n                        <Alerts/>\n                        <Switch>\n                            <Route exact path='/register'\n                                   render={() => <AccountTemplate> <Register/></AccountTemplate>}/>\n                            <Route exact path='/new_company'\n                                   render={() => <AccountTemplate> <NewCompanyProfile/></AccountTemplate>}/>\n                            <Route exact path='/password/reset/confirm/:uid/:token'\n                                   render={() => <AccountTemplate><ResetPasswordConfirmContainer/></AccountTemplate>}/>\n                            <Route exact path='/reset_password'\n                                   render={() => <AccountTemplate> <ResetPasswordContainer/></AccountTemplate>}/>\n                            <Route exact path='/activate/:uid/:token'\n                                   render={() => <AccountTemplate> <ActivateContainer/></AccountTemplate>}/>\n                            <Route exact path='/faq_group'\n                                   render={() => <AccountTemplate> <FrequentlyAskedQuestions/></AccountTemplate>}/>\n                            <Route exact path='/login' render={() => <AccountTemplate> <Login/></AccountTemplate>}/>\n                            <Route exact path='/faq' component={FrequentlyAskedQuestions}/>\n                            <Route exact path='/' component={HomeContainer}/>\n                            <PrivateRoute exact path='/contact' component={ContactContainer}/>\n                            <PrivateRoute exact path='/profileEdit/:num' component={ProfileEditContainer}/>\n                            <PrivateRoute exact path='/profileView' component={ProfileViewContainer}/>\n                            <Route exact path='/request_for_proposals' component={RequestForQuotationContainer}/>\n                            <Route exact path='/companies' component={CompaniesContainer}/>\n                            <PrivateRoute exact path='/profile/:id' component={ProfileContainer}/>\n                            <Route component={() => <PageNotFound/>} />\n                        </Switch>\n                    </AlertProvider>\n                </Provider>\n            </BrowserRouter>\n           </ApolloProvider>\n        </div>\n    }\n}\n\nexport default App;","/home/seva/JollyTeam/src/serviceWorker.js",[],"/home/seva/JollyTeam/src/component/layout/Alerts.js",[],"/home/seva/JollyTeam/src/component/Preloader/preloader.js",[],"/home/seva/JollyTeam/src/component/layout/PageNotFound.js",[],"/home/seva/JollyTeam/src/component/Templates/account_template/account_template.js",[],"/home/seva/JollyTeam/src/redux/redux_store.ts",[],["224","225"],"/home/seva/JollyTeam/src/redux/reducers/AuthReducer.tsx",[],"/home/seva/JollyTeam/src/component/FAQ/FAQ.tsx",["226","227"],"import React, {useState} from 'react'\nimport {gql} from \"apollo-boost\";\nimport {useMutation, useQuery} from 'react-apollo';\nimport s from \"./FAQ.module.css\";\nimport cn from \"classnames\";\nimport Preloader from \"../Preloader/preloader\";\nimport {Header} from \"../layout/Header/Header\";\nimport {Footer} from \"../layout/Footer/Footer\";\nimport {faqAPI} from \"../../api/FaqApi\";\nimport 'antd/dist/antd.css';\nimport {Skeleton} from \"antd\";\n\n\nconst Query_Groups = gql`\n  query {\n    FAQGroups {\n        Title,\n        id\n    }\n}`;\n\nconst Query_Item = gql`\n  query {\n    FAQItems{\n        Title\n        Group{\n        id\n        Title\n      }\n        Answer\n        Active\n        id\n}\n}`;\n\nconst Update_Item = gql`\nmutation updateItem($id: Int! $Title: String $Group: ID $Active: Boolean $Answer: String){\n  updateItem(id: $id ,input:{\n    Title: $Title,\n    Group: $Group,\n    Answer: $Answer,\n    Active: $Active\n  }){\n    item{\n      Title\n      Group{\n        id\n        Title\n      }\n      Answer\n      Active\n      id\n    }\n  }\n}\n`;\n\n\n\nexport const FrequentlyAskedQuestions = () => {\n    const [updateItem] = useMutation(Update_Item);\n        const OnClick = (item: {\n        id: number,\n        Title: string,\n        Answer: string,\n        Active: boolean,\n        Group: { id: number, Title: string }\n    }) => {\n        debugger\n\n        const id = Number(item.id)\n\n        faqAPI.active_Item({\n                 id: id,\n                 Title: item.Title,\n                 Group: Number(item.Group.id),\n                 Answer: item.Answer,\n                 Active: !item.Active\n             })\n        // updateItem({\n        //     variables: {\n        //         id: id,\n        //         Title: item.Title,\n        //         Group: Number(item.Group.id),\n        //         Answer: item.Answer,\n        //         Active: item.Active ? false : true\n        //     }\n        // });\n    }\n    const {data, loading}: any = useQuery(\n        Query_Groups, {\n            pollInterval: 500000// refetch the result every 0.5 second\n        }\n    );\n    const [items, setItem] = useState<Array<string> | any>()\n    const MakeActive = (Id: number) => {\n        debugger\n        const NewItem = [...items]\n\n        NewItem.filter(e => e.id === Id)[0].Active = !NewItem.filter(e => e.id === Id)[0].Active\n        setItem(NewItem)\n\n    }\n    const SuitableItems = (props: any) => {\n        const {data, loading}: any = useQuery(\n            Query_Item, {\n                pollInterval: 500// refetch the result every 0.5 second\n            }\n        );\n\n\n        if (loading) return <Skeleton active />;\n        // if (!data.items.edges.node) return <Preloader/>\n        setItem(data.FAQItems)\n\n        const suitableItems = items && items.filter((i: any) => Number(i.Group.id) === Number(props.Id))\n        return (\n            <div key={props.Id}>\n                {suitableItems && suitableItems.map((item: any, i:number) => <div key={item.id}>\n                    <h6 className={[s.item, \"d-flex justify-content-between d-flex align-items-center\"].join(' ')}><span\n                        className=\"text-danger\">{item.Title}</span>\n                        <div\n                            className={cn({[s.active]: item.Active}, s.menu_toogle)}\n                            onClick={() => MakeActive(item.id)}\n                        >\n                        </div>\n                    </h6>\n                    <p className={cn({[s.active]: item.Active}, s.group, s.dropdown)}>{item.Answer}</p>\n                </div>)}\n            </div>\n        )\n    }\n\n    if (loading) return <Preloader/>;\n    return (\n        <div>\n            <Header/>\n            <div className={s.main}>\n                <h3 className=\"container text-center mt-3 mb-3\">FAQ</h3>\n                <p className=\"middle text-center\">Here you can find all the information you need</p>\n                {data && data.FAQGroups.map((group: any) =>\n                    <div key={group.id}>\n                        <div className=\"row border-bottom ml-3 mb-3\"><h5 className={s.group}>{group.Title}</h5></div>\n                        <SuitableItems Id={group.id}/>\n                    </div>)}\n            </div>\n            <Footer/>\n        </div>\n    )\n}","/home/seva/JollyTeam/src/component/common/PrivateRoute.tsx",[],"/home/seva/JollyTeam/src/component/Contact/ContactContainer.tsx",[],"/home/seva/JollyTeam/src/component/home/HomeContainer.tsx",[],"/home/seva/JollyTeam/src/component/Companies/companiesContainer.tsx",[],"/home/seva/JollyTeam/src/component/requestForProposals/requestForProposals.tsx",["228"],"import React, {ChangeEvent, FormEvent, useEffect, useState} from \"react\";\nimport s from './requestForProposals.module.css'\nimport style from '../accounts/Profile/ProfileEdit/ProfileEdit.module.css'\nimport Dropzone from \"react-dropzone\";\nimport Select from 'react-select'\nimport {CustomDropZoneType} from \"../accounts/Profile/ProfileEdit/Document\";\nimport {profileAPI} from \"../../api/profileApi\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {\n    GetCategorySelector,\n    GetCurrencySelector,\n    GetPaymentMethodsS,\n} from \"../../redux/reducers/RequestForProposals-selectors\";\nimport {GetCategory, GetCountries, GetPaymentMethods} from \"../../redux/reducers/ProfileReducer\";\nimport {useHistory} from \"react-router-dom\";\nimport store from \"../../redux/redux_store\";\nimport {createMessage} from \"../../redux/reducers/MessageReducer\";\n\n\ntype TextPropsType = {\n    element: string,\n    type?: string,\n    value: any,\n    onChange: any\n\n}\nlet InputText = (props: TextPropsType) => {\n    return (<div className={s.inputText}>\n            <label>{props.element}</label>\n            <input className='form-control' type={props.type} placeholder={`Input your ${props.element.toLowerCase()}`}\n                   id={props.element} value={props.value} onChange={props.onChange} required/>\n        </div>\n    )\n}\n\n\nlet CustomSelect = (props: { label: string, value: any, placeholder?: string, onChange: any, options: Array<{ label: string, value: string }> }) => {\n    return (\n        <div className={s.customSelect}>\n            <label>{props.label}</label>\n            <Select className={s.select} options={props.options}\n                    placeholder={props.placeholder} value={props.value}\n                    onChange={props.onChange}/>\n        </div>\n    )\n}\n\nconst img = {\n    display: 'block',\n    width: 'auto',\n    height: '100%'\n};\n\nexport const RequestForProposals = (Currency: any) => {\n    const dispatch = useDispatch()\n    useEffect(() => {\n        dispatch(GetCountries())\n        dispatch(GetCategory())\n        dispatch(GetPaymentMethods())\n    }, [])\n    const currency = useSelector(GetCurrencySelector)\n    const paymentM: Array<{ id: number, method: string }> = useSelector(GetPaymentMethodsS)\n    const categories: Array<{ id: number, Name: string }> = useSelector(GetCategorySelector)\n    const CustomDropZone = (props: CustomDropZoneType) => {\n        return (\n            <div>\n                <label>{props.label}</label>\n                <section className={style.thumb}>\n\n                    <Dropzone onDrop={props.onDrop}>\n                        {({getRootProps, getInputProps}) => (\n                            <div {...getRootProps({className: \"dropzone\"})}>\n\n                                <input {...getInputProps()} />\n                                <div className={s.clip}/>\n                                <p>{props.p}</p>\n                                <h5>{props.h5}</h5>\n\n                                {!!props.AllowButton && (<button type=\"button\">\n                                    Upload\n                                </button>)}\n                            </div>\n                        )}\n                    </Dropzone>\n                </section>\n            </div>\n        )\n    }\n\n    const handleDrop4 = (aceptedFiles: any) => {\n        debugger\n        setAttachments(aceptedFiles.map((file: any) => Object.assign(file, {\n                preview: URL.createObjectURL(file)\n\n            }\n        )));\n        console.log(attachments)\n    }\n\n\n    const Thumbs = () => {\n        debugger\n        const file: any = attachments[0]\n        return (\n            <div className={s.preview} key={file.name}>\n                <div className={style.thumbInner}>\n                    <img\n                        alt=\"thumbnail\"\n                        src={file.preview}\n                        style={img}\n                    />\n                </div>\n            </div>)\n    }\n\n    const options = currency.map((c:any) => {\n        return {value: c.currencies[0].code, label: c.currencies[0].code}\n    })\n\n    const categoryOptions = categories.map(c => {\n        return {value: c.Name, label: c.Name}\n    })\n    const paymentMOptions = paymentM.map(c => {\n        debugger\n        return {value: c.method, label: c.method}\n    })\n\n    const [keywords, setKeywords] = useState<string>(\"\")\n    const [category, setCategory] = useState<string>(\"\")\n    const [descriptions, setDescriptions] = useState<string>(\"\")\n    const [attachments, setAttachments] = useState<any>(\"\")\n    const [preferred_currency, setPreferred_currency] = useState<string>(\"\")\n    const [preferred_unit_price, setPreferred_unit_price] = useState<string>(\"\")\n    const [preferred_shipping_agreement, setPreferred_shipping_agreement] = useState<string>(\"\")\n    const [destinationPort, setDestinationPort] = useState<string>(\"\")\n    const [payment_method, setPayment_method] = useState<string>(\"\")\n    const [privacy_policy, setPrivacy_policy] = useState<boolean>(false)\n    const history = useHistory()\n    const HandleSubmit = (e: FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        let form_data = new FormData();\n        form_data.append(\"keywords\", keywords)\n        form_data.append(\"category\", category)\n        form_data.append(\"descriptions\", descriptions)\n        form_data.append('attachments', attachments[0], attachments[0].name)\n        form_data.append(\"preferredCurrency\", preferred_currency)\n        form_data.append(\"preferredUntilPrice\", preferred_unit_price)\n        form_data.append(\"preferredShippingAgreement\", preferred_shipping_agreement)\n        form_data.append(\"destinationPort\", destinationPort)\n        form_data.append(\"paymentMethod\", payment_method)\n        form_data.append(\"iAgree\", String(privacy_policy))\n        profileAPI.postRequestForProposals(form_data).then(() => {\n            history.push('/')\n            store.dispatch(createMessage({log_in_ed: \"Request was submitted\"}))\n        })\n\n    }\n\n    return (<div className={s.main}>\n        <h2>Find the right business partner</h2>\n        <p>With this function you can leave the information you need to select a partner or supplier and we will send it to the right companies.</p>\n        <form className=\"form-group\" onSubmit={HandleSubmit}>\n            <div className={s.double}>\n                <InputText element=\"Keywords\" value={keywords}\n                           onChange={(e: ChangeEvent<HTMLInputElement>) => setKeywords(e.target.value)}/>\n                <CustomSelect label=\"Category\" options={categoryOptions} value={{label: category, value: category}}\n                              onChange={(e: { label: string, value: string }) => setCategory(e.label)}/>\n            </div>\n            <div className={s.Descriptions}>\n                <label>Descriptions</label>\n                <textarea className='form-control' style={{height: \"20vh\"}} placeholder={\"Text your description here\"}\n                          id=\"Descriptions\" value={descriptions} onChange={(e) => setDescriptions(e.target.value)}/>\n                {attachments[0] && (<Thumbs/>)}\n            </div>\n            <CustomDropZone label=\"Attachments\" AllowButton={1} onDrop={handleDrop4}\n                            p=\"Drag&Drop Your attachments here\"/>\n            <div className={s.double}>\n                <CustomSelect label=\"Preferred currency\" options={options}\n                              placeholder={\"Choose your preferred currency \"}\n                              value={{value: preferred_currency, label: preferred_currency}}\n                              onChange={(e: { label: string, value: string }) => setPreferred_currency(e.label)}/>\n                <InputText element=\"Preferred unit price\" value={preferred_unit_price}\n                           onChange={(e: ChangeEvent<HTMLInputElement>) => setPreferred_unit_price(e.target.value)}/>\n            </div>\n            <div className={s.double}>\n                <InputText element=\"Preferred shipping agreement\" value={preferred_shipping_agreement}\n                           onChange={(e: ChangeEvent<HTMLInputElement>) => setPreferred_shipping_agreement(e.target.value)}/>\n                <InputText element=\"Destination port\" value={destinationPort}\n                           onChange={(e: ChangeEvent<HTMLInputElement>) => setDestinationPort(e.target.value)}/>\n            </div>\n            <div>\n                <label>Payment method</label>\n\n                <Select options={paymentMOptions} onChange={(e: any) => setPayment_method(e.value)}/>\n            </div>\n            <div style={{display: \"flex\", margin: \"10px\"}}>\n                <input type={\"checkbox\"} onChange={() => setPrivacy_policy(!privacy_policy)}/>\n                <small>I agree with privacy policy</small>\n            </div>\n            <button className={s.button} type={\"submit\"}>\n                Submit\n            </button>\n        </form>\n    </div>)}","/home/seva/JollyTeam/src/component/User/Profile.tsx",["229","230","231","232","233","234","235","236"],"import React, {useEffect} from \"react\";\nimport defaultImage from \"../../media/default.jpg\";\nimport s from './Profile.module.css'\nimport { Link } from 'react-router-dom'\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {GetDocumentsSelector, GetSuitableProfile} from \"../../redux/reducers/Profile-selectors\";\nimport {GetDocuments, GetProfiles} from \"../../redux/reducers/ProfileReducer\";\nimport {RouteComponentProps, withRouter, WithRouterProps, WithRouterStatics} from \"react-router\";\nimport {\n    ApiOutlined,\n    BulbOutlined,\n    CarOutlined,\n    CoffeeOutlined,\n    FormatPainterOutlined,\n    SettingOutlined,\n    ShopOutlined,\n    SkinOutlined\n} from \"@ant-design/icons\";\nimport store from \"../../redux/redux_store\";\n\ntype PropsType = {\n\n    ProfileId: number,\n\n}\n\nexport const Profile: React.ComponentClass<Omit<RouteComponentProps<any>, keyof RouteComponentProps<any>> & WithRouterProps<(props: number) => JSX.Element>> & WithRouterStatics<(props: any) => JSX.Element> = withRouter((props:any) => {\n    const dispatch = useDispatch()\n    useEffect(() => {\n        dispatch(GetDocuments())\n        dispatch(GetProfiles())\n    }, [])\n\n    const profiles: Array<{\n        id: number,\n        companyProfilePicture: string,\n        companyName: string,\n        companyDescription: string,\n        country: string,\n        companyLogo: string,\n        sections: string,\n        owner: number\n    }> = props.profiles\n\n\n\n    const profile = profiles.filter(p => p.id === Number(props.match.params.id))\n    console.log(props.my_documents)\n\n    const my_documents =(props.my_documents && profile[0]) ? props.my_documents.filter((e: {\n        id: number,\n        Title: string,\n        Thumbnail: string,\n        Download: string,\n        owner: number\n    }) => e.owner && (e.owner == profile[0].owner) ): []\n    const onclick:any = (link: string) => {window.open(link, '_blank')}\n    return <div className={s.main}>\n        {profile.map(p => (\n            <div>\n                <div className={s.back} style={\n                    {backgroundImage: ` linear-gradient( rgba(56, 56, 56, 0.596), rgba(56, 56, 56, 0.596), rgba(56, 56, 56, 0.596), rgba(255, 255, 255, 0.56) ),  url(${(p.companyProfilePicture || defaultImage)})`}}>\n                    <div className={s.name_country}>\n                        <img alt={\"logo\"} className={s.logo} src={p.companyLogo}/>\n                        <div>\n                            <h3>{p.companyName}</h3>\n                            <h5>{p.country}</h5>\n                        </div>\n                    </div>\n                </div>\n                <div className={s.box_size}>\n                    <p>{p.companyDescription}</p>\n                    {profile && JSON.parse(p.sections).map((e: {\n                            Text: string,\n                            Icon: string,\n                            Title: string,\n\n                        }) => (\n                            <div className={s.section}>\n                                <div>\n                                    {e.Icon === \"Logistics companies\" && (\n                                        <CarOutlined className={s.icon}/>)}\n                                    {e.Icon === \"Restaurant business\" && (\n                                        <CoffeeOutlined className={s.icon}/>)}\n                                    {e.Icon === \"Grocery supplier\" && (\n                                        <ShopOutlined className={s.icon}/>)}\n                                    {e.Icon === \"Small manufacturers\" && (\n                                        <BulbOutlined className={s.icon}/>)}\n                                    {e.Icon === \"Fabric supplier\" && (\n                                        <SkinOutlined className={s.icon}/>)}\n                                    {e.Icon === \"Supplier of kitchen utensils\" && (\n                                        <SettingOutlined className={s.icon}/>)}\n                                    {e.Icon === \"Supplier of household appliances\" && (\n                                        <ApiOutlined className={s.icon}/>)}\n                                    {e.Icon === \"Interior designers\" && (\n                                        <FormatPainterOutlined className={s.icon}/>)}\n\n\n                                    <h3>{e.Title}</h3>\n                                </div>\n                                <p>{e.Text}</p>\n\n                            </div>\n                        )\n                    )}\n                </div>\n            </div>\n        ))}\n        {props.my_documents && my_documents.map((d: any) => (<div className={s.box_size}>\n                <a href={d.Download} download><img alt={\"thumbnail\"} style={{borderRadius: '10px'}} src={d.Thumbnail}/></a>\n                <small>{d.Title}</small>\n                <Link  to={d.Download}  download>Download</Link>\n            </div>\n        ))}\n\n    </div>\n\n})","/home/seva/JollyTeam/src/component/requestForProposals/requestForProposalsContainer.tsx",[],"/home/seva/JollyTeam/src/component/accounts/activate/ActivateContainer.tsx",[],"/home/seva/JollyTeam/src/component/accounts/Login/login.tsx",[],"/home/seva/JollyTeam/src/component/accounts/resetPasswordConfirm/ResetPasswordConfirmContainer.tsx",[],"/home/seva/JollyTeam/src/component/accounts/resetPassword/ResetPasswordContainer.tsx",[],"/home/seva/JollyTeam/src/component/accounts/Profile/ProfileView/ProfileViewContainer.tsx",[],"/home/seva/JollyTeam/src/component/accounts/Profile/ProfileEdit/ProfileEditContainer.tsx",[],"/home/seva/JollyTeam/src/component/User/ProfileContainer.jsx",["237","238","239","240","241"],"import React from \"react\";\nimport {connect} from \"react-redux\";\nimport {Profile} from \"./Profile\";\nimport {compose} from 'redux'\nimport {GetDocuments, GetProfiles} from '../../redux/reducers/ProfileReducer'\nimport {RouteComponentProps, withRouter} from \"react-router\";\nimport {AppStateType} from \"../../redux/redux_store\";\nimport {GetDocumentsSelector, GetSuitableProfile} from \"../../redux/reducers/Profile-selectors\";\nimport store from '../../redux/redux_store'\nimport Preloader from \"../Preloader/preloader\";\n\n// type PropsType = {\n//     profiles: Array<{\n//         id: number,\n//         companyProfilePicture: string,\n//         companyName: string,\n//         companyDescription: string,\n//         country: string,\n//         companyLogo: string,\n//         sections: string,\n//         owner: 1\n//     }> | never,\n//     my_documents: Array<{\n//         id: number,\n//         Title: string,\n//         Thumbnail: string,\n//         Download: string,\n//         owner: number\n//     }>,\n//     GetProfiles: () => void,\n//     GetDocuments: () => void,\n//     id : any\n//\n// }\n\nclass ProfileContainer extends React.Component {\n    componentDidMount() {\n        this.props.GetDocuments()\n        this.props.GetProfiles()\n    }\n\n    render() {\n        return (\n            (this.props.profileS.length >= 1)  ? <Profile profiles={this.props.profileS} my_documents={this.props.my_documents}/> : <Preloader/>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    debugger\n    return {\n        my_documents: state.profile.documents,\n        profileS: state.profile.profiles\n    }\n}\n\nexport default compose(withRouter, connect(mapStateToProps, {GetProfiles, GetDocuments}))(ProfileContainer)","/home/seva/JollyTeam/src/component/accounts/Register/register.jsx",[],"/home/seva/JollyTeam/src/component/Templates/main_template.js",[],"/home/seva/JollyTeam/src/redux/reducers/ContentReducer.tsx",[],"/home/seva/JollyTeam/src/redux/reducers/FAQReducer.tsx",["242","243"],"import {ThunkAction} from \"redux-thunk\";\nimport {AppStateType, InferActionsTypes} from \"../redux_store\";\nimport {faqAPI} from \"../../api/FaqApi\";\nimport Group from \"react-select/src/components/Group\";\n\nconst ACTIVE_ITEM = \"ACTIVE_ITEM\"\nconst GET_FAQ_GROUPS = \"GET-FAQ-GROUPS\"\nconst GET_FAQ_ITEM = \"GET-FAQ-ITEM\"\nconst MAKE_ACTIVE = \"MAKE_ACTIVE\"\n\ntype initialState = {\n    groups: Array<string | number>,\n    items: Array<any>\n    active_item: any\n}\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, FaqActionTypes>\nlet initialState: initialState = {\n    groups: [],\n    items: [],\n    active_item: null\n}\n\nexport const FAQReducer = (state = initialState, action: FaqActionTypes) => {\n    switch (action.type) {\n        case GET_FAQ_GROUPS:\n            return {...state, groups: action.payload}\n        case ACTIVE_ITEM:\n            return {...state, active_item: action.payload}\n        case GET_FAQ_ITEM:\n            return {...state, items: action.payload}\n        case MAKE_ACTIVE:\n            return {...state, active_item: {...state.active_item, Active: !state.active_item.Active}}\n        default:\n            return state\n    }\n}\n\nexport type FaqActionTypes = InferActionsTypes<typeof actions>\nconst actions: { [key: string]: (...args: any) => any; } = {\ngetFaqGroupsSuccess : (payload: Array<{Title: string, id: number}>): FaqActionTypes => ({type: GET_FAQ_GROUPS, payload}),\ngetFaqItemsSuccess : (payload: Array<{\n        id: number,\n        Title: string,\n        Answer: string,\n        Active: boolean,\n        Group: string\n}>): FaqActionTypes => ({type: GET_FAQ_ITEM, payload}),\nactiveIdSuccess : (item: {\n        id: number,\n        Title: string\n}): FaqActionTypes => ({type: ACTIVE_ITEM, payload: item})}\n\nexport const getFaqGroups = ():ThunkType => async (dispatch) => {\n    let response = await faqAPI.getFaq_Group()\n    debugger\n    dispatch(actions.getFaqGroupsSuccess(response.data))\n}\nexport const ActiveId = (item: any):ThunkType  => async (dispatch) => {\n    debugger\n    await  faqAPI.active_Item(item)\n    faqAPI.getFaq_Item()\n    dispatch(actions.activeIdSuccess(item))\n    dispatch({type: MAKE_ACTIVE})\n}\n\nexport const getFaqItems = ():ThunkType => async (dispatch) => {\n    let response = await faqAPI.getFaq_Item()\n    dispatch(actions.getFaqItemsSuccess(response.data))\n}\n","/home/seva/JollyTeam/src/api/AuthApi.ts",["244"],"import {instance} from \"./profileApi\";\nimport {config} from \"../api\";\n\nexport const authAPI = {\n    getUser: (tokenConfig: any) => {\n\n        return instance.get<{\n            first_name: string,\n            id: number,\n            email: string\n        }>('auth/users/me/', tokenConfig)\n    },\n    login: (body: any, csrf_token: string) => {\n\n        return instance.post('auth/token/login', body, {\n            headers: {\n                'Content-Type': 'application/json',\n                'X-CSRFToken': csrf_token,\n\n            }})\n    },\n    logout: (tokenConfig: any) => {\n\n        return instance.post('auth/token/logout', \"\", tokenConfig)\n    },\n    register: (body: any, csrf_token: string) => {\n        debugger\n        return instance.post('auth/users/', body, {\n            headers: {\n                'Content-Type': 'application/json',\n                'X-CSRFToken': csrf_token,\n\n            }})\n    },\n    forgot_password: (body: any) => {\n\n        return instance.post('auth/users/reset_password/', body)\n    },\n    reset_password: (body: any) => {\n\n        return instance.post('auth/users/reset_password_confirm/', body)\n    },\n    activate: (body: any) => {\n        debugger\n        return instance.post('auth/users/activation/', {\n            uid: body.uid,\n            token: body.token\n        })\n    },\n}","/home/seva/JollyTeam/src/redux/reducers/ErrorsReducer.tsx",[],"/home/seva/JollyTeam/src/api/profileApi.ts",[],"/home/seva/JollyTeam/src/redux/reducers/ProfileReducer.tsx",[],"/home/seva/JollyTeam/src/redux/reducers/MessageReducer.tsx",[],"/home/seva/JollyTeam/src/api/FaqApi.ts",[],"/home/seva/JollyTeam/src/component/home/Home.tsx",["245"],"import React, {useState} from 'react'\nimport s from './Home.module.css'\nimport cn from \"classnames\";\nimport {Link, NavLink, useHistory} from 'react-router-dom'\nimport {Input} from 'antd';\n\ntype PropsType = {\n    logout: () => void,\n    GetSearchedData: (search: string) => any,\n    isAuthenticated: boolean | null,\n}\n\nexport const Home: React.FC<PropsType> = ({logout, GetSearchedData, isAuthenticated}) => {\n    const history = useHistory();\n    const Search = (search: string) => {\n        debugger\n        // @ts-ignore\n        GetSearchedData(search).then(() => {\n            history.push('/companies')\n        })\n    }\n\n\n\n\n\n    const guestLinks = (\n      <div className={s.auth}>\n      <ul >\n      <li><NavLink to=\"/register\">Sing Up</NavLink></li>\n      <li><NavLink to=\"/login\" >Sing In</NavLink></li>\n    </ul></div>)\n\n\n    const authLinks = (\n        <div className={s.auth}>\n            <ul>\n                <li><a onClick={logout} href=\"/login\">Logout</a></li>\n            </ul>\n        </div>)\n\n\n    const [active, setActive] = useState(true)\n    const [search, setSearch] = useState(\" \")\n\n    const handleKeyDown = (e: any) => {\n        if (e.key === 'Enter') {\n            Search(search)\n        }\n    }\n\n    return <div className={s.homebody}>\n        <header className={s.header}>\n            <a href=\"/\" className={s.logo}> Jolly<span className=\"text-danger\">T</span>eam<span\n                className=\"text-danger\">.</span></a>\n            <div onClick={() => setActive(!active)} className={cn({[s.active]: active === true}, s.menu_toogle)}/>\n            <nav className={cn({[s.active]: active === true}, s.homenav)}>\n                <ul>\n                    <li><NavLink to=\"/companies\"> Companies</NavLink></li>\n                    <li><NavLink to=\"/faq\">FAQ</NavLink></li>\n                    <li><NavLink to=\"/contact\">Contact</NavLink></li>\n                </ul>\n            {isAuthenticated ? authLinks : guestLinks}\n\n\n            </nav>\n\n            <div className={s.clearfix}/>\n        </header>\n        <div className={s.main}>\n            <h3 className={s.homeh3}>On our portal you can find suppliers and partners for small businesses</h3>\n            <Link to=\"/request_for_proposals\" type=\"submit\" className={s.button}>\n                Request For Proposals\n            </Link>\n            <Link to=\"/contact\" type=\"submit\" className={s.button}>\n                Creat a Connection\n            </Link>\n            <div className={s.inputWrapper}>\n                <div className={s.icon} onClick={() => Search(search)}/>\n                <input placeholder=\"Search Companies\" onKeyDown={handleKeyDown}\n                       onChange={(e) => setSearch(e.target.value)} value={search} type=\"text\"/>\n            </div>\n        </div>\n        </div> //:  <Redirect to={props.page[0].find}/>\n}","/home/seva/JollyTeam/src/component/Contact/Contact.tsx",["246","247","248"],"import React from 'react'\nimport {Formik, Form, Field, FormikErrors} from 'formik'\nimport s from './Contact.module.css'\nimport {contactAPI} from \"../../api/ContactApi\";\nimport {gql} from \"apollo-boost\";\nimport {useMutation} from \"react-apollo\";\nimport store from \"../../redux/redux_store\";\nimport {createMessage} from \"../../redux/reducers/MessageReducer\";\nimport {useHistory} from \"react-router-dom\";\n\n\nconst validate: ValidateType = (values) => {\n    const errors: any = {}\n    if (!values.emailAddress) {\n        errors.emailAddress = 'Required!'\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.emailAddress)) {\n        errors.emailAddress = 'Invalid email address'\n    }\n    if (!values.message) {\n        errors.message = 'Required'\n    }\n\n    return errors;\n};\n\nconst Create_Contact = gql`\nmutation createContact($owner_: Int! $name_: String $subject_: String $emailAddress_: String $message_: String $companyName_: String $phoneNumber_: String){\n  createContact(\n    owner_: $owner_,\n    name_: $name_,\n    subject_: $subject_,\n    emailAddress_: $emailAddress_\n    message_: $message_,\n    companyName_: $companyName_,\n    phoneNumber_: $phoneNumber_,\n  ){\ncontact{\n    phoneNumber\n    subject\n    emailAddress\n  }\n  }\n  }\n`;\n\nconst initialValues = {\n    name: '',\n    companyName: '',\n    emailAddress: '',\n    phoneNumber: '',\n    subject: '',\n    message: '',\n\n\n}\ntype ValidateType = (values: { name: string; companyName: string; emailAddress: string; phoneNumber: string; subject: string; message: string; }) => void | object | Promise<FormikErrors<{ name: string; companyName: string; emailAddress: string; phoneNumber: string; subject: string; message: string; }>>\n\n\ntype PropsType = {\n    userID: string | null\n}\nexport const Contact = (props: PropsType) => {\n\n    const history = useHistory()\n    const [createContact, {data}] = useMutation(Create_Contact);\n    const onSubmit = (body: {\n        name: string,\n        companyName: string,\n        emailAddress: string,\n        phoneNumber: string,\n        subject: string,\n        message: string\n    }) => {\n        debugger\n        const owner = {\n            owner: Number(props.userID)\n        }\n        const Target = Object.assign(body, owner)\n        createContact({\n            variables: {\n                owner_: Number(props.userID),\n                name_: body.name,\n                subject_: body.subject,\n                emailAddress_: body.emailAddress,\n                message_: body.message,\n                companyName_: body.companyName,\n                phoneNumber_: body.phoneNumber,\n            }\n        }).then(r => {\n            history.push('/')\n            store.dispatch(createMessage({log_in_ed: \"Contact form was delivered\"}))\n            store.dispatch(createMessage({log_in_ed: \"Wait for the answer\"}))\n        })\n    }\n\n    const FormikElement = (props: {\n        label: string,\n        name: string,\n        error: string | null,\n        placeholder: string\n    }) => (\n        <div className={s.form}>\n            <label>{props.label}</label>\n            <Field className={[\"form-control\", props.error && s.validInput].join(\" \")} name={[props.name]}\n                   placeholder={`Enter Your ${props.placeholder}`}/>\n        </div>\n    )\n\n\n    return <div className={s.main}>\n        <div>\n            <h2 className={s.contact} >Contact Us</h2>\n        <Formik validate={validate} initialValues={initialValues} onSubmit={onSubmit}>\n            {({errors, touched}) => (\n                <Form className=\"form-group\">\n                    <div className={s.line}>\n                        <FormikElement error={null} label=\"Name\" name=\"name\" placeholder=\"Name\"/>\n                        <FormikElement error={null} label=\"Company Name\" name=\"companyName\" placeholder=\"Company Name\"/>\n                    </div>\n                    <div className={s.line}>\n                        <div className={s.form}>\n                            <label>Email Address<span style={{color: 'red'}}> *</span></label>\n                            <Field\n                                className={[\"form-control\", errors.emailAddress && touched.emailAddress && s.validInput].join(\" \")}\n                                name=\"emailAddress\" placeholder={`Enter Your Email Address`}/>\n                            {errors.emailAddress && touched.emailAddress ? <div style={{color: '#ff4d4f'}}>{errors.emailAddress}</div> : null}\n                        </div>\n                        <FormikElement error={null} label=\"Subject\" name=\"subject\" placeholder=\"Subject\"/></div>\n                    <div className={s.form}>\n                            <label>Message<span style={{color: 'red'}}> *</span></label>\n                            <Field\n                                className={[\"form-control\", errors.message && touched.message && s.validInput].join(\" \")}\n                                name=\"message\" placeholder={`Enter Your Message`}/>\n                            {errors.message && touched.message ? <div style={{color: '#ff4d4f'}}>{errors.message}</div> : null}\n                        </div>\n\n                    <button className={s.button} type=\"submit\">Submit</button>\n                </Form>)}\n        </Formik>\n            </div>\n    </div>\n}","/home/seva/JollyTeam/src/redux/reducers/RequestForProposals-selectors.tsx",[],"/home/seva/JollyTeam/src/component/Companies/companies.tsx",["249","250","251","252","253","254"],"import React, {SetStateAction, useEffect, useState} from \"react\";\nimport s from './companies.module.css'\nimport cn from \"classnames\";\nimport {ProfileType} from \"../accounts/Profile/ProfileView/ProfileView\";\nimport {CategoriesType} from \"../accounts/Profile/ProfileEdit/ProfileEditContainer\";\nimport {GetCountries, GetProfiles} from \"../../redux/reducers/ProfileReducer\";\nimport store from \"../../redux/redux_store\";\nimport {Typography} from \"antd\";\n\n\nconst OnClick = (props: string) => {\n    window.location.href = `profile/${props}`\n\n}\n\nconst Profile = (props: { id: number, companyLogo: string, companyName: string, country: string, companyDescription: string }) => {\n\n    return (\n        <div onClick={() => OnClick(String(props.id))} className={s.company}>\n            <img alt={\"Logo\"} className={s.logo} src={props.companyLogo}/>\n            <h5>{props.companyName}</h5>\n            <h6>{props.country}</h6>\n            <p>{props.companyDescription.slice(0, 64) + \"...\"}</p>\n        </div>\n    )\n}\n\ntype RootProps = {\n    GetSearchedData: (search: string) => void,\n    profiles: ProfileType,\n    categories: CategoriesType,\n    countries: any,\n\n}\nexport const Companies = (props: RootProps) => {\n    useEffect(() => {\n\n        debugger\n        store.dispatch(GetCountries())\n        props.profiles[0] != undefined && (props.profiles[0].id == 0 && (store.dispatch(GetProfiles())))\n\n    }, [])\n\n    const [activeCountries, setActiveCountries] = useState<boolean>(false)\n    const [activeCategories, setActiveCategories] = useState<boolean>(false)\n    const [search, setSearch] = useState<Array<string>>([])\n    const [filter, setFilter] = useState<boolean>(false)\n\n    const Search = (e: SetStateAction<any>) => {\n        debugger\n        setSearch(e)\n        props.GetSearchedData(e)\n    }\n\n    const Check = (e: any) => {\n        debugger\n        const checkBox: null | HTMLInputElement | any= document.getElementById(`check${e}`);\n\n      if (checkBox.checked)\n        {\n            const Actual = [...search, e]\n            setSearch(Actual)\n            props.GetSearchedData(Actual.join())}\n        else {\n            const Actual = search.filter(element => element !== e)\n            setSearch(Actual)\n            search.length !== 0 ? props.GetSearchedData(Actual.join()) : props.GetSearchedData(\"\")}\n\n    }\n    const  SearchButton1 = (name: string) => {\n        debugger\n        const checkBox: any = document.getElementById(`check${name}`);\n        if (checkBox.checked)\n        {\n            setSearch([...search, name])\n        }\n        else {\n            setSearch(search.filter(e => e !== name))\n        }\n    }\n\n    const  SearchButton2 = () => {\n        props.GetSearchedData(search.join())\n        setFilter(false)\n    }\n    const  ClearAll = () => {\n        debugger\n        search.forEach(e => {\n            const checkBox: any = document.getElementById(`check${e}`)\n            checkBox.checked = false\n        })\n        setSearch([])\n    }\n    return(\n        <div className={s.main}>\n            <button onClick={ ()=>  setFilter(true)} className={s.sort}>Sort Results</button>\n            <div className={cn({[s.active] : filter}, s.filter)}>\n                <div className={s.filter_inner}>\n                    <div className={s.buttons}>\n                    <h3 onClick={()=> setFilter(false)}>Close</h3> <h3 onClick={() => ClearAll()}>Clear All</h3><h3 onClick={() => SearchButton2()}>Apply</h3>\n                    </div>\n                <h2>Sort results by</h2>\n                <input type={\"text\"} onChange={(e) => Search(e.target.value)} placeholder={\"Search keywords\"} className={s.input}/>\n                <div className={s.title}><h3>Category</h3> <div className={cn({[s.active]: activeCategories}, s.skip)} onClick={() => setActiveCategories(!activeCategories)}/></div>\n                {props.categories.map(c => (\n                    <div className={cn({[s.active] : activeCategories}, s.select)} key={c.id}>\n                        <h6 >{c.Name}</h6>\n                        <input onClick={()  =>  !filter ? Check(c.Name) : SearchButton1(c.Name)} type={\"checkbox\"} id={`check${c.Name}`} className={s.checkbox}/>\n                    </div>\n                ))}\n                    <div className={s.title}><h3>Country</h3>\n                        <div className={cn({[s.active]: activeCountries}, s.skip)}\n                             onClick={() => setActiveCountries(!activeCountries)}/>\n                    </div>\n                    {props.countries.map((c: any, index: number) => (\n                        <div className={cn({[s.active]: activeCountries}, s.select)} key={index}>\n                            <h6>{c.name}</h6>\n                            <input onClick={() => !filter ? Check(c.name) : SearchButton1(c.name)} type={\"checkbox\"}\n                                   id={`check${c.name}`} className={s.checkbox}/>\n                        </div>\n                    ))}\n                </div>\n            </div>\n            <div className={s.profiles}>\n                {props.profiles.length == 0 && (\n                    <div><Typography.Title style={{color: \"lightgray\", marginLeft: \"10vw\", marginTop: \"20vh\"}}\n                                           level={4}>Nothing has been found on your request....</Typography.Title>\n                    </div>)}\n                {props.profiles[0] != undefined ? (props.profiles[0].id != 0 && props.profiles.map((p) => (\n                    <Profile key={p.id} id={p.id} companyLogo={p.companyLogo} companyName={p.companyName}\n                             country={p.country} companyDescription={p.companyDescription}/>\n                ))) : (props.profiles.map((p) => (\n                    <Profile key={p.id} id={p.id} companyLogo={p.companyLogo} companyName={p.companyName}\n                             country={p.country} companyDescription={p.companyDescription}/>\n                )))}\n\n            </div>\n        </div>\n    )\n}","/home/seva/JollyTeam/src/component/accounts/activate/Activate.tsx",["255","256","257","258","259"],"import React from 'react'\nimport { SmileOutlined, SmileFilled } from '@ant-design/icons'\nimport {Typography} from \"antd\";\nimport icon1 from '../../../media/dot-com.jpg'\nimport icon2 from '../../../media/logo-social.png'\n\nexport const Activate = (props: any) => {\n\n    const { Paragraph } = Typography\n    return(<div>\n            <img style={{display: \"none\"}} src={icon1}/>\n            <img style={{display: \"none\"}} src={icon2}/>\n             <Typography.Title style={{marginTop: \"40vh\", textAlign: \"center\"}} level={5} >Your account has been activated successful</Typography.Title>\n         </div>\n    )\n}\n\n","/home/seva/JollyTeam/src/component/accounts/Profile/ProfileView/ProfileView.tsx",[],"/home/seva/JollyTeam/src/component/accounts/Profile/ProfileEdit/ProfileEdit.tsx",["260","261","262"],"import React, {ChangeEvent, FormEvent, useState} from \"react\";\nimport Dropzone from \"react-dropzone\";\nimport s from './ProfileEdit.module.css'\nimport defaultImage from '../../../../media/default.jpg'\nimport defaultThumbnail from '../../../../media/thumbnail.jpg'\nimport Select from 'react-select'\nimport {CustomDropZoneType} from \"./Document\";\nimport {profileAPI} from \"../../../../api/profileApi\";\nimport {Input} from \"antd\"\nimport Preloader from \"../../../Preloader/preloader\";\nimport {RouteComponentProps, withRouter, WithRouterProps, WithRouterStatics} from \"react-router\";\n\ntype InputProps = {\n    element: string,\n    value: any,\n    onChange: any,\n    label: string\n}\n\nlet InputText = (props: InputProps) => {\n    return (<div id={s.doubleInput}><label>{props.label}</label>\n            <Input className='form-control' type=\"text\" placeholder={props.element} id={props.element}\n                   value={props.value} onChange={props.onChange}/>\n        </div>\n    )\n}\nlet TextAreaText = (props: InputProps) => {\n    return (<div id={s.doubleInput}><label>{props.label}</label>\n            <Input.TextArea className='form-control' placeholder={props.element} id={props.element}\n                            value={props.value} onChange={props.onChange}/>\n        </div>\n    )\n}\n\nconst img = {\n    display: 'block',\n    width: '150px',\n    margin: \"10px\",\n    borderRadius: '10px',\n    height: 'auto'\n\n};\n\ntype RootPropsType = {\n    match : {params: {num: number}},\n    countries: Array<any>\n    category: Array<{\n        id: number,\n        Name: string\n    }>,\n    postDocument: (userID: number) => void\n    previousProfile: Array<{\n        id: number,\n        companyProfilePicture: string,\n        companyName: string,\n        companyDescription: string,\n        country: string,\n        companyLogo: string,\n        sections: string,\n        owner: number\n    }>,\n    userID: number,\n    documents: Array<{\n        id: number,\n        Title: string,\n        Thumbnail: string,\n        Download: string,\n        owner: number\n    }>,\n    updateManufacturer: (form_data: any, id: number) => void,\n    updateDocument: (form_doc_data: any, id: number) => void\n\n}\n\nexport const ProfileEdit: any | React.ComponentClass<Omit<RouteComponentProps<any>, keyof RouteComponentProps<any>> & WithRouterProps<(props: any) => JSX.Element>> & WithRouterStatics<(props: any) => JSX.Element> = withRouter((props:any) => {\n    const prevProf = props.previousProfile.filter((e:any) => e.owner === props.userID)\n    const options = props.countries.map((c:any) => {\n        return {value: c.name, label: c.name}\n    })\n    const categoryOptions = props.category.map((c:any) => {\n        return {value: c.Name, label: c.Name}\n    })\n    const num = Number(props.match.params.num)-1\n\n    const [companyProfilePicture, setCompanyProfilePicture] = useState<any>();\n    const [companyLogo, setCompanyLogo] = useState<any>(prevProf[num].companyLogo);\n    const [background, setBackground] = useState<string | Array<any>>(prevProf[num].companyProfilePicture)\n    const [companyName, setCompanyName] = useState<string>(prevProf[num].companyName)\n    const [country, setCountry] = useState<string | { value: string, label: string }>(prevProf[num].country)\n    const [companyDescription, setCompanyDescription] = useState<string>(prevProf[num].companyDescription)\n    const [section, setSection] = useState<any>(JSON.parse(prevProf[num].sections));\n    const [Documents, setDocument] = useState<any>(props.documents);\n\n\n    const handleSubmit = (e: FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n\n        let form_data = new FormData();\n        companyProfilePicture !== undefined && (form_data.append('companyProfilePicture', companyProfilePicture[0], companyProfilePicture[0].name))\n        companyLogo[0].preview !== undefined && (form_data.append('companyLogo', companyLogo[0], companyLogo[0].name));\n        form_data.append(\"sections\", JSON.stringify(section))\n        form_data.append('companyName', companyName);\n        form_data.append('companyDescription', companyDescription);\n        if (typeof country !== \"string\") {\n            form_data.append('country', country.value);\n        } else {\n            form_data.append('country', country);\n        }\n        form_data.append('owner', String(props.userID));\n        const id = props.userID\n        props.updateManufacturer(form_data, id)\n\n        Documents.forEach((e: {\n            id: number,\n            Title: string,\n            Thumbnail: string,\n            Download: string,\n            owner: number\n        }, index: number) => {\n            let form_doc_data = new FormData();\n            form_doc_data.append('Title', e.Title);\n            Documents[index].Thumbnail.name && form_doc_data.append('Thumbnail', e.Thumbnail);\n            Documents[index].Download.name && form_doc_data.append(\"Download\", e.Download)\n            form_doc_data.append('owner', String(props.userID));\n            props.updateDocument(form_doc_data, (props.documents[index].id) - 1)\n        })\n\n\n    }\n\n\n    const handleDrop = (acceptedFiles: any) => {\n        setCompanyProfilePicture(acceptedFiles.map((file: any) => Object.assign(file, {\n            preview: URL.createObjectURL(file)\n        })));\n        setBackground(acceptedFiles.map((file: any) => URL.createObjectURL(file)))\n    }\n    type ThumbsType = {\n        index: number,\n        documents: any,\n        userID: number\n\n    }\n    const Thumbs = (props: ThumbsType) => {\n        const index = props.index\n        const file = Documents[index]\n        return (\n            <div key={file.name}>\n                <div>\n                    <img\n                        alt=\"thumbnail\"\n                        src={(file.Thumbnail.preview ? file.Thumbnail.preview : file.Thumbnail) || defaultThumbnail}\n                        style={img}\n                    />\n                </div>\n            </div>)\n    }\n\n\n    const handleDrop4 = (acceptedFiles: any) => {\n        debugger\n        setCompanyLogo(acceptedFiles.map((file: any) => Object.assign(file, {\n            preview: URL.createObjectURL(file)\n        })));\n    }\n\n    const CustomDropZone = (props: CustomDropZoneType) => {\n\n        return (\n            <div>\n                <label>{props.label}</label>\n                <section className={s.thumb}>\n\n                    <Dropzone onDrop={props.onDrop}>\n                        {({getRootProps, getInputProps}) => (\n                            <div  {...getRootProps({className: \"dropzone\"})}>\n\n                                <input {...getInputProps()} />\n                                <div className={s.clip}/>\n                                <p>{props.p}</p>\n                                <h5>{props.h5}</h5>\n\n                                {!!props.AllowButton && (<button type=\"button\">\n                                    Upload\n                                </button>)}\n                            </div>\n                        )}\n                    </Dropzone>\n                </section>\n            </div>\n        )\n    }\n\n    const SectionhandleInputChange = (e: { name: string, value: string }, index: number) => {\n        debugger\n        const {name, value} = e;\n        const list = [...section];\n        list[index][name] = value;\n        setSection(list);\n    };\n\n\n    const DocumentedInputChange = (e: { target: { name: string, value: string } }, index: number) => {\n        const {name, value} = e.target;\n        const list = [...Documents];\n        list[index][name] = value;\n        setDocument(list);\n    };\n\n\n    const DocumenthandleInputFileThumbnail = (aceptedFiles: Array<any>, index: number) => {\n        const {preview} = Object.assign(aceptedFiles[0], {preview: URL.createObjectURL(aceptedFiles[0])});\n        const list = [...Documents];\n        list[index]['Thumbnail'] = aceptedFiles[0];\n        list[index]['preview'] = preview;\n\n        setDocument(list);\n    }\n\n    const DocumenthandleInputDownload = (acceptedFiles: Array<any>, index: any) => {\n        debugger\n        const list = [...Documents];\n        list[index]['Download'] = acceptedFiles[0];\n\n\n        setDocument(list);\n    }\n\n\n    const handleRemoveClick = (index: number) => {\n        const list = [...section];\n        list.splice(index, 1);\n        setSection(list);\n    };\n\n    const handleRemoveClick2 = (index: number) => {\n        profileAPI.DeleteDocuments((Documents[index].id) - 1)\n        const list = [...Documents];\n        list.splice(index, 1);\n        setDocument(list);\n    };\n\n    const handleAddClick = () => {\n        setSection([...section, {Title: \"\", Icon: \"\", Text: \"\"}]);\n    };\n\n    const handleAddClick2 = () => {\n        props.postDocument(props.userID)\n        setDocument([...Documents, {Title: \"\", Thumbnail: \"\", Download: \"\"}])\n\n\n    };\n\n\n    return (props.category && props.previousProfile) ? (\n            <form className={[\"form-group\", s.form].join(\" \")} onSubmit={handleSubmit}>\n                <section style={\n                    {backgroundImage: `linear-gradient( rgba(56, 56, 56, 0.596), rgba(56, 56, 56, 0.596) ), url(${background || defaultImage})`}}\n                         className={s.pic}>\n                    <Dropzone onDrop={handleDrop}>\n                        {({getRootProps, getInputProps}) => (\n                            <div {...getRootProps({className: \"dropzone\"})}>\n                                <div className={s.compamyPictureform}>\n                                    <input {...getInputProps()} />\n                                    <div className={s.clip}/>\n                                    <p>Drag & Drop your company picture here</p>\n                                    <h5>Company Profile Picture</h5>\n                                    <button type=\"button\">\n                                        Upload\n                                    </button>\n                                </div>\n                            </div>\n\n                        )}\n                    </Dropzone>\n                </section>\n                <div id={s.main}>\n                    <div className={s.double}>\n                        <InputText label=\"Company Name\" element=\"companyName\" value={companyName}\n                                   onChange={(e: ChangeEvent<HTMLInputElement>) => setCompanyName(e.target.value)}/>\n                        <div className={s.select}>\n                            <label>Country</label>\n                            <Select options={options} defaultValue={{label: country, value: country}}\n                                    placeholder={\"Choose your country\"} onChange={(e: any) => setCountry(e)}/>\n                        </div>\n                    </div>\n                    <TextAreaText label={\"Company Description\"} element=\"companyDescription\" value={companyDescription}\n                                  onChange={(e: ChangeEvent<HTMLTextAreaElement>) => setCompanyDescription(e.target.value)}/>\n                    {companyLogo && (companyLogo[0].preview ? <img style={img} src={companyLogo[0].preview}/> :\n                        <img style={img} src={companyLogo}/>)}\n                    <CustomDropZone label=\"Company Logo\" AllowButton={1} onDrop={handleDrop4}\n                                    p=\"Drag&Drop Your attachments here\"/>\n\n                    {section.map((x: { Icon: any, Title: string, Text: string }, i: number) => {\n                        return (\n                            <div key={i}>\n                                <h2>Section</h2>\n                                <div className={s.double}>\n                                    <div id={s.doubleInput}>\n                                        <label>Title</label>\n                                        <input className='form-control' placeholder=\"Title\" name=\"Title\" value={x.Title}\n                                               onChange={e => SectionhandleInputChange(e.target, i)}/>\n                                    </div>\n                                    <div id={s.doubleInput}>\n                                        <label>Icon</label>\n                                        <Select options={categoryOptions} defaultValue={{label: x.Icon, value: x.Icon}}\n                                                placeholder=\"Icon\" onChange={(e: any) => SectionhandleInputChange({\n                                            name: \"Icon\",\n                                            value: e.value\n                                        }, i)}/>\n                                    </div>\n                                </div>\n                                <label>Text</label>\n                                <Input.TextArea className='form-control' placeholder=\"Text\" name=\"Text\" value={x.Text}\n                                                onChange={e => SectionhandleInputChange(e.target, i)}/>\n                                <div className={s.tools}>\n                                    {section.length !== 1 &&\n                                    <button type=\"button\" className=\"btn btn-outline-danger\"\n                                            onClick={() => handleRemoveClick(i)}>Remove</button>}\n                                    {section.length - 1 === i &&\n                                    <button type=\"button\" className=\"btn btn-outline-primary\" onClick={() => {\n                                        handleAddClick()\n                                    }}>Add 1 Section</button>}\n                                </div>\n                            </div>\n                        )\n                    })}\n\n\n                    {Documents && Documents.map((y: { Title: string }, i: number) => {\n                        return (\n                            <div key={i}>\n                                <h2>Document</h2>\n                                <label>Title</label>\n                                <input className='form-control' placeholder=\"Title\" name=\"Title\" value={y.Title}\n                                       onChange={e => DocumentedInputChange(e, i)}/>\n\n                                <Thumbs documents={props.documents} userID={props.userID} index={i}/>\n\n                                <CustomDropZone name=\"Thumbnail\" label=\"Thumbnail\" AllowButton={0}\n                                                onDrop={(acceptedFiles: any) => DocumenthandleInputFileThumbnail(acceptedFiles, i)}\n                                                p=\"Drag&Drop Your attachments here\"/>\n                                <CustomDropZone name=\"Download\" label=\"Download\" AllowButton={1}\n                                                onDrop={(acceptedFiles: any) => DocumenthandleInputDownload(acceptedFiles, i)}\n                                                p=\"Drag&Drop Your attachments here\"/>\n                                <div className={s.tools}>\n                                    {Documents.length !== 1 &&\n                                    <button type=\"button\" className=\"btn btn-outline-danger\"\n                                            onClick={() => handleRemoveClick2(i)}>Remove</button>}\n                                    {Documents.length - 1 === i &&\n                                    <button type=\"button\" className=\"btn btn-outline-primary\" onClick={() => {\n                                        handleAddClick2()\n                                    }}>Add 1 Document</button>}\n                                </div>\n                            </div>\n                        )\n                    })}\n                    <button className={s.button} type={\"submit\"}>Submit</button>\n                </div>\n            </form>\n        )\n        : <Preloader/>\n})","/home/seva/JollyTeam/src/component/layout/Header/HeaderContainer.jsx",[],"/home/seva/JollyTeam/src/redux/reducers/Profile-selectors.tsx",[],"/home/seva/JollyTeam/src/component/layout/Header/Header.jsx",[],"/home/seva/JollyTeam/src/component/accounts/resetPassword/ResetPassword.jsx",[],"/home/seva/JollyTeam/src/component/layout/Footer/Footer.jsx",[],"/home/seva/JollyTeam/src/component/accounts/resetPasswordConfirm/ResetPasswordConfirm.jsx",[],"/home/seva/JollyTeam/src/api.ts",[],"/home/seva/JollyTeam/src/api/ContentApi.ts",[],"/home/seva/JollyTeam/src/component/accounts/CreateCompany/NewCompanyProfile.jsx",["263","264","265","266","267"],"import React from 'react'\nimport {Link} from 'react-router-dom'\nimport {connect} from 'react-redux'\nimport {register} from '../../../redux/reducers/AuthReducer'\nimport {createMessage} from '../../../redux/reducers/MessageReducer'\nimport s from '../Login/login.module.css'\nimport {profileAPI} from \"../../../api/profileApi\";\nimport Select from \"react-select\";\nimport {GetCategory} from \"../../../redux/reducers/ProfileReducer\";\nimport {withRouter} from 'react-router-dom'\nimport {compose} from \"redux\";\nimport store from \"../../../redux/redux_store\";\nimport {CustomDropZoneType} from \"../Profile/ProfileEdit/Document\";\nimport style from \"../Profile/ProfileEdit/ProfileEdit.module.css\";\nimport Dropzone from \"react-dropzone\";\n\n\nexport function getCookie(name) {\n    debugger\n    let cookieValue = null;\n    if (document.cookie && document.cookie !== '') {\n        const cookies = document.cookie.split(';');\n        for (let i = 0; i < cookies.length; i++) {\n            const cookie = cookies[i].trim();\n            // Does this cookie string begin with the name we want?\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                break;\n            }\n        }\n    }\n    return cookieValue;\n}\n\nclass NewCompanyProfile extends React.Component {\n    componentDidMount() {\n        this.props.GetCategory()\n    }\n\n    state = {\n        CompanyName: '',\n        CompanyDescriptions: '',\n        ProductType: '',\n        ProductDescriptions: '',\n        logo: ''\n\n    }\n\n\n    onChange = e => {\n        debugger\n        this.setState({[e.target.name]: e.target.value})\n    }\n    onChange_1 = e => {\n        debugger\n        this.setState({[\"ProductType\"]: e.value})\n    }\n\n    render() {\n\n        const CustomDropZone = (props) => {\n        return (\n            <div>\n                <label>{props.label}</label>\n                <section className={style.thumb}>\n\n                    <Dropzone onDrop={props.onDrop}>\n                        {({getRootProps, getInputProps}) => (\n                            <div {...getRootProps({className: \"dropzone\"})}>\n\n                                <input {...getInputProps()} />\n                                <div className={s.clip}/>\n                                <p>{props.p}</p>\n                                <h5>{props.h5}</h5>\n\n                                {!!props.AllowButton && (<button type=\"button\">\n                                    Upload\n                                </button>)}\n                            </div>\n                        )}\n                    </Dropzone>\n                </section>\n            </div>\n        )\n    }\n\n        const handleDrop4 = (acceptedFiles) => {\n            debugger\n            this.setState({\n                [\"logo\"]: acceptedFiles.map((file) => Object.assign(file, {\n                        preview: URL.createObjectURL(file)\n\n                    }\n                ))\n            });\n\n        }\n\n        const categoryOptions = this.props.categories.map(c => {\n            return {value: c.Name, label: c.Name}\n        })\n        const csrftoken = getCookie('csrftoken');\n\n        const {history} = this.props\n        const onSubmit = (e) => {\n            debugger\n            e.preventDefault();\n            const {CompanyName, CompanyDescriptions, logo, ProductType, ProductDescriptions} = this.state\n            const owner = this.props.owner\n            const section = [{Title: \" \", Icon: ProductType, Text: ProductDescriptions}]\n            profileAPI.PostProfile({\n                CompanyName: CompanyName,\n                companyLogo: logo[0],\n                CompanyDescriptions: CompanyDescriptions,\n                ProductType: ProductType,\n                section: section,\n                owner: owner\n            }).then(r => history.push('/'),\n                this.props.createMessage({log_in_ed: \"New Company's Profile was created\"}))\n        }\n\n        // if (this.props.isAuthenticated) {\n        //     return <Redirect to=\"/\"/>\n        // }\n\n        const {CompanyName, CompanyDescriptions, ProductType, ProductDescriptions} = this.state\n        let CustomSelect = (props) => {\n            return (\n                <div className={s.customSelect}>\n                    <label>{props.label}</label>\n                    <Select className={s.select} name={props.name} options={props.options}\n                            placeholder={props.placeholder} value={props.value}\n                            onChange={props.onChange}/>\n                </div>\n            )\n        }\n        return (\n            <div className=\"col-md-12\">\n                <div className={s.main}>\n                    <h2 className={s.text}>Your Company</h2>\n                    <form onSubmit={onSubmit}>\n                        <div className=\"form-group\">\n                            <label>Company Name</label>\n                            <input\n                                type=\"text\"\n                                className=\"form-control\"\n                                name=\"CompanyName\"\n                                onChange={this.onChange}\n                                value={CompanyName}\n                            />\n                        </div>\n                        <div className=\"form-group\">\n                            <CustomDropZone label=\"Attachments\" AllowButton={1} onDrop={handleDrop4}\n                                            p=\"Drag&Drop Your attachments here\"/>\n                        </div>\n                        <div className=\"form-group\">\n                            <label>Company Descriptions</label>\n                            <textarea\n                                className=\"form-control\"\n                                name=\"CompanyDescriptions\"\n                                onChange={this.onChange}\n                                value={CompanyDescriptions}\n                            />\n                        </div>\n                        <div className=\"form-group\">\n                            <CustomSelect value={{label: ProductType, value: ProductType}} label=\"Product Type\"\n                                          name=\"ProductType\" options={categoryOptions}\n\n                                          onChange={this.onChange_1}/>\n                        </div>\n                        <div className=\"form-group\">\n                            <label>ProductDescriptions</label>\n                            <textarea\n\n                                className=\"form-control\"\n                                name=\"ProductDescriptions\"\n                                onChange={this.onChange}\n                                value={ProductDescriptions}\n                            />\n                        </div>\n                        <div className=\"form-group\">\n                            <button type=\"submit\" className={s.button}>\n                                Create\n                            </button>\n                        </div>\n                        <p>\n                            Do you want to do it later? <Link to=\"/\" className={s.link}>Home</Link>\n                        </p>\n                    </form>\n                </div>\n            </div>\n\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    owner: state.auth.user.id,\n    isAuthenticated: state.auth.isAuthenticated,\n    isLoading: state.auth.isLoading,\n    categories: state.profile.category\n})\n\nexport default compose(withRouter, connect(mapStateToProps, {register, createMessage, GetCategory}))(NewCompanyProfile)","/home/seva/JollyTeam/src/component/accounts/Profile/ProfileEdit/Document.tsx",[],{"ruleId":"268","replacedBy":"269"},{"ruleId":"270","replacedBy":"271"},{"ruleId":"272","severity":1,"message":"273","line":30,"column":8,"nodeType":"274","messageId":"275","endLine":30,"endColumn":18},{"ruleId":"268","replacedBy":"269"},{"ruleId":"270","replacedBy":"271"},{"ruleId":"276","severity":1,"message":"277","line":61,"column":12,"nodeType":"274","messageId":"275","endLine":61,"endColumn":22},{"ruleId":"276","severity":1,"message":"278","line":62,"column":15,"nodeType":"274","messageId":"275","endLine":62,"endColumn":22},{"ruleId":"279","severity":1,"message":"280","line":60,"column":8,"nodeType":"281","endLine":60,"endColumn":10,"suggestions":"282"},{"ruleId":"276","severity":1,"message":"283","line":5,"column":22,"nodeType":"274","messageId":"275","endLine":5,"endColumn":33},{"ruleId":"276","severity":1,"message":"284","line":6,"column":9,"nodeType":"274","messageId":"275","endLine":6,"endColumn":29},{"ruleId":"276","severity":1,"message":"285","line":6,"column":31,"nodeType":"274","messageId":"275","endLine":6,"endColumn":49},{"ruleId":"276","severity":1,"message":"286","line":19,"column":8,"nodeType":"274","messageId":"275","endLine":19,"endColumn":13},{"ruleId":"276","severity":1,"message":"287","line":21,"column":6,"nodeType":"274","messageId":"275","endLine":21,"endColumn":15},{"ruleId":"279","severity":1,"message":"280","line":32,"column":8,"nodeType":"281","endLine":32,"endColumn":10,"suggestions":"288"},{"ruleId":"289","severity":1,"message":"290","line":56,"column":31,"nodeType":"291","messageId":"292","endLine":56,"endColumn":33},{"ruleId":"276","severity":1,"message":"293","line":57,"column":11,"nodeType":"274","messageId":"275","endLine":57,"endColumn":22},{"ruleId":"272","severity":1,"message":"294","line":6,"column":9,"nodeType":"274","messageId":"275","endLine":6,"endColumn":28},{"ruleId":"272","severity":1,"message":"295","line":7,"column":9,"nodeType":"274","messageId":"275","endLine":7,"endColumn":21},{"ruleId":"272","severity":1,"message":"284","line":8,"column":9,"nodeType":"274","messageId":"275","endLine":8,"endColumn":29},{"ruleId":"272","severity":1,"message":"285","line":8,"column":31,"nodeType":"274","messageId":"275","endLine":8,"endColumn":49},{"ruleId":"272","severity":1,"message":"286","line":9,"column":8,"nodeType":"274","messageId":"275","endLine":9,"endColumn":13},{"ruleId":"276","severity":1,"message":"296","line":4,"column":8,"nodeType":"274","messageId":"275","endLine":4,"endColumn":13},{"ruleId":"297","severity":1,"message":"298","line":17,"column":5,"nodeType":"274","messageId":"299","endLine":17,"endColumn":31},{"ruleId":"276","severity":1,"message":"300","line":2,"column":9,"nodeType":"274","messageId":"275","endLine":2,"endColumn":15},{"ruleId":"276","severity":1,"message":"301","line":5,"column":9,"nodeType":"274","messageId":"275","endLine":5,"endColumn":14},{"ruleId":"276","severity":1,"message":"302","line":4,"column":9,"nodeType":"274","messageId":"275","endLine":4,"endColumn":19},{"ruleId":"276","severity":1,"message":"303","line":65,"column":28,"nodeType":"274","messageId":"275","endLine":65,"endColumn":32},{"ruleId":"276","severity":1,"message":"304","line":78,"column":15,"nodeType":"274","messageId":"275","endLine":78,"endColumn":21},{"ruleId":"289","severity":1,"message":"305","line":40,"column":27,"nodeType":"291","messageId":"292","endLine":40,"endColumn":29},{"ruleId":"289","severity":1,"message":"290","line":40,"column":65,"nodeType":"291","messageId":"292","endLine":40,"endColumn":67},{"ruleId":"279","severity":1,"message":"306","line":42,"column":8,"nodeType":"281","endLine":42,"endColumn":10,"suggestions":"307"},{"ruleId":"289","severity":1,"message":"290","line":125,"column":40,"nodeType":"291","messageId":"292","endLine":125,"endColumn":42},{"ruleId":"289","severity":1,"message":"305","line":129,"column":36,"nodeType":"291","messageId":"292","endLine":129,"endColumn":38},{"ruleId":"289","severity":1,"message":"305","line":129,"column":73,"nodeType":"291","messageId":"292","endLine":129,"endColumn":75},{"ruleId":"276","severity":1,"message":"308","line":2,"column":10,"nodeType":"274","messageId":"275","endLine":2,"endColumn":23},{"ruleId":"276","severity":1,"message":"309","line":2,"column":25,"nodeType":"274","messageId":"275","endLine":2,"endColumn":36},{"ruleId":"276","severity":1,"message":"310","line":9,"column":13,"nodeType":"274","messageId":"275","endLine":9,"endColumn":22},{"ruleId":"311","severity":1,"message":"312","line":11,"column":13,"nodeType":"313","endLine":11,"endColumn":57},{"ruleId":"311","severity":1,"message":"312","line":12,"column":13,"nodeType":"313","endLine":12,"endColumn":57},{"ruleId":"276","severity":1,"message":"314","line":44,"column":6,"nodeType":"274","messageId":"275","endLine":44,"endColumn":19},{"ruleId":"311","severity":1,"message":"312","line":289,"column":63,"nodeType":"313","endLine":289,"endColumn":110},{"ruleId":"311","severity":1,"message":"312","line":290,"column":25,"nodeType":"313","endLine":290,"endColumn":61},{"ruleId":"272","severity":1,"message":"286","line":12,"column":8,"nodeType":"274","messageId":"275","endLine":12,"endColumn":13},{"ruleId":"272","severity":1,"message":"315","line":13,"column":9,"nodeType":"274","messageId":"275","endLine":13,"endColumn":27},{"ruleId":"316","severity":1,"message":"317","line":56,"column":24,"nodeType":"318","messageId":"319","endLine":56,"endColumn":48,"fix":"320"},{"ruleId":"316","severity":1,"message":"321","line":90,"column":17,"nodeType":"318","messageId":"319","endLine":94,"endColumn":19,"fix":"322"},{"ruleId":"272","severity":1,"message":"323","line":102,"column":15,"nodeType":"274","messageId":"275","endLine":102,"endColumn":24},"no-native-reassign",["324"],"no-negated-in-lhs",["325"],"no-unused-vars","'AddCompany' is defined but never used.","Identifier","unusedVar","@typescript-eslint/no-unused-vars","'updateItem' is assigned a value but never used.","'OnClick' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["326"],"'useSelector' is defined but never used.","'GetDocumentsSelector' is defined but never used.","'GetSuitableProfile' is defined but never used.","'store' is defined but never used.","'PropsType' is defined but never used.",["327"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'onclick' is assigned a value but never used.","'RouteComponentProps' is defined but never used.","'AppStateType' is defined but never used.","'Group' is defined but never used.","@typescript-eslint/no-redeclare","'initialState' is already defined.","redeclared","'config' is defined but never used.","'Input' is defined but never used.","'contactAPI' is defined but never used.","'data' is assigned a value but never used.","'Target' is assigned a value but never used.","Expected '!==' and instead saw '!='.","React Hook useEffect has a missing dependency: 'props.profiles'. Either include it or remove the dependency array.",["328"],"'SmileOutlined' is defined but never used.","'SmileFilled' is defined but never used.","'Paragraph' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'RootPropsType' is defined but never used.","'CustomDropZoneType' is defined but never used.","no-useless-computed-key","Unnecessarily computed property [\"ProductType\"] found.","Property","unnecessarilyComputedProperty",{"range":"329","text":"330"},"Unnecessarily computed property [\"logo\"] found.",{"range":"331","text":"332"},"'csrftoken' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"333","fix":"334"},{"desc":"333","fix":"335"},{"desc":"336","fix":"337"},[1747,1762],"\"ProductType\"",[2826,2834],"\"logo\"","Update the dependencies array to be: [dispatch]",{"range":"338","text":"339"},{"range":"340","text":"339"},"Update the dependencies array to be: [props.profiles]",{"range":"341","text":"342"},[2076,2078],"[dispatch]",[1147,1149],[1395,1397],"[props.profiles]"]